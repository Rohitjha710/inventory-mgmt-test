<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/css/dashboard.css">
</head>

<body>

  <div class="dashboard-container">
    <a href="/"
    style="display:inline-block; padding:15px 30px; background-color:#007bff; color:white; font-weight:bold; border-radius:10px; text-decoration:none; font-size:10px;">
    Home
 </a>
    <h1 class="title">Welcome <%= username %> to Inventory Mgmt Solution</h1>

    <!-- Tabs -->
    <div class="tabs">
      <button class="tab-button active" onclick="showTab('inventory')">Inventory Management</button>
      <button class="tab-button" onclick="showTab('bill')">Bill / Sales</button>
    </div>

    <!-- Tab Contents -->
    <div class="tab-content active" id="inventory">
      <div class="inventory-header">
        <button id="addItemBtn" class="btn-blue">+ Add Item</button>
        <button id="updateBtn" class="btn-yellow">Update Qty</button>
        <button id="saveBtn" class="btn-green" style="display:none;">Save</button>
      </div>

      <table class="inventory-table" id="inventoryTable">
        <thead>
          <tr>
            <th>Item Name</th>
            <th>Current Qty</th>
            <th class="update-mode">Add Units</th>
            <th class="update-mode">Final Qty</th>
          </tr>
        </thead>
        <tbody id="inventoryBody">
          <% items.forEach(item => { %>
            <tr data-name="<%= item.name %>">
              <td><%= item.name %></td>
              <td class="current"><%= item.qty %></td>
              <td class="update-mode">
                <input type="number" class="add-units" value="0" min="0" />
              </td>
              <td class="update-mode final">-</td>
            </tr>
          <% }) %>
        </tbody>
      </table>

      <!-- Summary -->
      <div id="updateSummary" class="summary-box" style="display:none;">
        <h3>Updated Items</h3>
        <table>
          <thead>
            <tr>
              <th>Item</th>
              <th>Old Qty</th>
              <th>Units Added</th>
              <th>New Qty</th>
            </tr>
          </thead>
          <tbody id="summaryBody"></tbody>
        </table>
      </div>
    </div>

    <!-- Add Item Modal -->
    <div id="addItemModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Add New Item</h3>
        <label>Item Name</label>
        <input type="text" id="newItemName" placeholder="Enter item name" />
        <label>Quantity</label>
        <input type="number" id="newItemQty" placeholder="Enter quantity" min="0" />
        <button id="saveNewItem" class="btn-blue">Add</button>
      </div>
    </div>

    <div class="tab-content" id="bill">
        <h2>Create Bill</h2>
        <table id="billTable">
          <thead>
            <tr>
              <th>Item</th>
              <th>Qty</th>
              <th>Price</th>
            </tr>
          </thead>
          <tbody id="billBody"></tbody>
        </table>
        <button id="generateBillBtn" class="btn-blue">Generate Bill</button>
        <h3>Past Bills</h3>
        <ul id="pastBills"></ul>
      </div>
      
  </div>

  <script>
    const token = localStorage.getItem("token");
    // Render table rows dynamically
    function renderTable(items) {
      const tbody = document.getElementById("inventoryBody");
      tbody.innerHTML = "";
      items.forEach(item => {
        tbody.innerHTML += `
          <tr data-name="${item.name}">
            <td>${item.name}</td>
            <td class="current">${item.qty}</td>
            <td class="update-mode"><input type="number" class="add-units" value="0" min="0" /></td>
            <td class="update-mode final">-</td>
          </tr>
        `;
      });
    }

    // ---- Modal Logic ----
    const modal = document.getElementById("addItemModal");
    const addItemBtn = document.getElementById("addItemBtn");
    const closeModal = modal.querySelector(".close");
    const saveNewItem = document.getElementById("saveNewItem");

    addItemBtn.onclick = () => modal.style.display = "flex";
    closeModal.onclick = () => modal.style.display = "none";
    window.onclick = (e) => { if (e.target == modal) modal.style.display = "none"; };

    // Add new item (API call)
    saveNewItem.onclick = async () => {
      const name = document.getElementById("newItemName").value.trim();
      const qty = parseInt(document.getElementById("newItemQty").value) || 0;

      if (!name) {
        alert("Enter item name");
        return;
      }

      const res = await fetch("/items", {
        method: "POST",
        headers: { "Content-Type": "application/json","Authorization": `Bearer ${token}` },
        body: JSON.stringify({ name, qty })
      });

      if (!res.ok) {
    const err = await res.text(); // read as text in case of error
    alert("Error: " + err);
    return;
  }

  const data = await res.json(); // ✅ safe to parse as JSON
  console.log("Added:", data);
  location.reload();
    };

    // ---- Update Qty Logic ----
    const updateBtn = document.getElementById("updateBtn");
    const saveBtn = document.getElementById("saveBtn");
    const summaryBox = document.getElementById("updateSummary");
    const summaryBody = document.getElementById("summaryBody");

    updateBtn.addEventListener("click", () => {
      document.querySelectorAll(".update-mode").forEach(el => el.style.display = "table-cell");
      updateBtn.style.display = "none";
      saveBtn.style.display = "inline-block";
      summaryBox.style.display = "none";
    });

    saveBtn.addEventListener("click", async () => {
      summaryBody.innerHTML = "";
      const rows = document.querySelectorAll("#inventoryBody tr");

      for (let row of rows) {
        const name = row.dataset.name;
        const currVal = parseInt(row.querySelector(".current").textContent);
        const addVal = parseInt(row.querySelector(".add-units").value) || 0;
        const finalVal = currVal + addVal;

        if (addVal > 0) {
          // update backend
          await fetch("/items/update", {
            method: "POST",
            headers: { "Content-Type": "application/json","Authorization": `Bearer ${token}` },
            body: JSON.stringify({ name, addUnits: addVal })
          });

          summaryBody.innerHTML += `
            <tr>
              <td>${name}</td>
              <td>${currVal}</td>
              <td>${addVal}</td>
              <td>${finalVal}</td>
            </tr>
          `;
        }
      }

      summaryBox.style.display = "block";
      saveBtn.style.display = "none";
      updateBtn.style.display = "inline-block";
      setTimeout(() => location.reload(), 1000); // reload after update
    });

    function showTab(tabId) {
      document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
      document.querySelector(`[onclick="showTab('${tabId}')"]`).classList.add('active');
      document.getElementById(tabId).classList.add('active');
    }
    // Function to attach live update listeners
function attachQtyListeners() {
  const rows = document.querySelectorAll("#inventoryBody tr");
  rows.forEach(row => {
    const currVal = parseInt(row.querySelector(".current").textContent);
    const addInput = row.querySelector(".add-units");
    const finalCell = row.querySelector(".final");

    // Initialize once
    finalCell.textContent = currVal;

    addInput.addEventListener("input", () => {
      const addVal = parseInt(addInput.value) || 0;
      finalCell.textContent = currVal + addVal;
    });
  });
}

// Run after page load
attachQtyListeners();


// Accept billId instead of creating another bill
document.getElementById("generateBillBtn").addEventListener("click", async () => {
  const rows = document.querySelectorAll("#billBody tr");
  let items = [];
  let total = 0;

  rows.forEach(r => {
    const name = r.dataset.name;
    const qty = parseInt(r.querySelector(".bill-qty").value) || 0;
    const price = parseInt(r.querySelector(".bill-price").value) || 0;

    if (qty > 0) {
      items.push({ name, qty, price });
      total += qty * price;
    }
  });

  if (items.length === 0) {
    alert("No items selected for bill");
    return;
  }

  // ✅ Save bill JSON
  const res = await fetch("/bills", {
    method: "POST",
    headers: { "Content-Type": "application/json" ,"Authorization": `Bearer ${token}`},
    body: JSON.stringify({ items, total })
  });
  const data = await res.json();
// Open a new tab to download the PDF

alert("Bill ready and downloaded!");
// Then fetch/download PDF
const pdfRes = await fetch(`/bills/pdf/${data.bill.id}`);
const blob = await pdfRes.blob();
const url = window.URL.createObjectURL(blob);
const a = document.createElement("a");
a.href = url;
a.download = `bill-${data.bill.id}.pdf`;
a.click();
window.URL.revokeObjectURL(url);

location.reload();



});


// Populate bill table initially
renderBillTable(<%- JSON.stringify(items) %>);

function renderBillTable(items) {
  const tbody = document.getElementById("billBody");
  tbody.innerHTML = "";
  items.forEach(item => {
    tbody.innerHTML += `
      <tr data-name="${item.name}">
        <td>${item.name}</td>
        <td><input type="number" class="bill-qty" min="0" value="0"></td>
        <td><input type="number" class="bill-price" min="0" value="0"></td>
      </tr>
    `;
  });
}


  </script>
  <script>
// Hide admin-only buttons for staff
const role = localStorage.getItem("role");
if (role !== "admin") {
  document.getElementById("addItemBtn").style.display = "none";
  document.getElementById("updateBtn").style.display = "none";
}

  </script>
</body>
</html>